{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","console","log","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4935095.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n// Below we are calling props nd destructing props\nconst Card = ({id,name,email}) =>{\n\treturn(\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\" >\n\t\t\t<img alt= \"robots\" src = {`https://robohash.org/${id}?200x200`}/>\n\t\t\t\t<div>\n\t\t\t\t\t<h1>{name}</h1>\n\t\t\t\t\t<p>{email}</p>\n\t\t\t\t</div>\n\t\t</div>\n\t\t)\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n\tconst cardComponent = robots.map((user,i)=>{\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n\t})\n\treturn(\n\t<div>\n\t\n\t\t{cardComponent}\n\n\t</div>\n\t\t)\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox =({searchfield,searchChange}) =>{\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\ttype='search'\n\t\t\tplaceholder='search robots'\n\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn(\n\t\t\t<div style = {{overflowY:'scroll', border : '1px solid blue', height: '800px'}} >\n\t\t\t{props.children}\n\t\t\t</div>\n\t\t)\n}\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\thasError : false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.state({hasError:true})\n\t}\n\n\trender(){\n\t\tif (this.state.hasError){\n\n\t\treturn(<h1>Ooooops Something Went Worng ! </h1>)\t\n\t\t}\n\t\telse{\n\t\t\treturn this.props.children;\n\t\t}\n\t\t\n\t}\n}\nexport default ErrorBoundary;","import React,{Component ,Fragment} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport {setSearchField, requestRobots} from '../actions';\nimport {connect} from 'react-redux'; \nimport 'materialize-css'\n// import \"../node_modules/jquery/dist/jquery.min.js\";\n// import \"../node_modules/bootstrap/dist/js/bootstrap.min.js\";\n\nconst mapStateToProps = (state) => {\n\t\treturn {\n\t\t\tsearchField : state.searchRobots.searchField,\n\t\t\trobots : state.requestRobots.robots,\n\t\t\tisPending : state.requestRobots.isPending,\n\t\t\terror : state.requestRobots.error\n\t\t}\t\n\t}\n\nconst mapDispatchToProps = (dispatch) => {\n\t\treturn {\n\t\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\t\t// onRequestRobots: () => requestRobots(dispatch) or can be written as\n\t\t\tonRequestRobots : () => dispatch(requestRobots())\n\t\t}\n\t}\n\nclass App extends Component{\n\n\n\tcomponentDidMount(){\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender ()\n\t{\n\t\tconst {searchField , onSearchChange ,robots, isPending} = this.props;\n\t\tconst filteredRobots = robots.filter(robot=>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\n\t\t// if(robots.length===0)\n\t\t// {\n\t\t// \treturn <h1>Loading...</h1>\n\t\t// }\n\t\t// else\n \t\t// {\n\t\treturn (\n\n\t\t<div className='tc'>\n        <h1 className='f1' id='title'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n\t\t);\n\t}\n}\n// \n// Connect is Higher Order Functio that returns another functio (App)\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\n\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n\n} from './constants.js'\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t.then(response=>response.json())\n\t.then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\n\t.catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n\n} from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField : ''\n }\n\nconst initialStateRobots ={\n\tisPending:true,\n\trobots:[],\n\terror:''\n}\nexport const searchRobots = (state = initialStateSearch, action = {}) =>\n {\n \tconsole.log(action.type)\n \tswitch(action.type)\n \t{\n \t\tcase  CHANGE_SEARCH_FIELD : \n \t\t\treturn Object.assign({}, state, {searchField: action.payload});\n \t\tdefault: \n \t\t\treturn state;\n \t}\n }\n export const requestRobots = (state = initialStateRobots, action = {}) => {\n \tswitch (action.type) {\n\n \t\tcase REQUEST_ROBOTS_PENDING:\n \t\treturn Object.assign({},state,{isPending:true})\n\n \t\tcase REQUEST_ROBOTS_SUCCESS:\n \t\treturn Object.assign({},state,{robots:action.payload,isPending:false})\n\n \t\tcase REQUEST_ROBOTS_FAILED:\n \t\treturn Object.assign({},state,{error:action.payload})\n\n \t\tdefault:\n \t\treturn state\n \t}\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// if module have no extension it automatically took as a java script\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport App from './containers/App';\nimport './containers/App.css';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware, combineReducers} from 'redux';\nimport {searchRobots, requestRobots} from './reducer';\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render( <Provider store = {store} >\n\t\t\t\t\t<App/>\n\t\t\t\t</Provider>\n\n\t, document.getElementById('root'));\n\t//\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}